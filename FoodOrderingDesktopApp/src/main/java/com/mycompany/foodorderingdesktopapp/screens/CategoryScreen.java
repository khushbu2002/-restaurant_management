/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.foodorderingdesktopapp.screens;

import Interfaces.Values;
import com.mycompany.foodorderingdesktopapp.database_connectivity.ConnectionClass;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.*;

/**
 *
 * @author acer
 */
public class CategoryScreen extends javax.swing.JFrame implements Values{

    private final UserModel currentUser;

    /**
     * Creates new form CategoryScreen
     */
    public CategoryScreen(UserModel category) {
        initComponents();
        updateCategoryTable();
        currentUser=category;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingLabel = new javax.swing.JPanel();
        categoryPageLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        addDeleteUpdateTabbedPanel = new javax.swing.JTabbedPane();
        deleteCategoryPanel = new javax.swing.JPanel();
        deleteCategoryNameLabel = new javax.swing.JLabel();
        deleteCategoryUserNameTF = new javax.swing.JTextField();
        deleteCategoryButton = new javax.swing.JButton();
        updateCategoryPanel = new javax.swing.JPanel();
        updateCategoryLabel = new javax.swing.JLabel();
        updateCategoryNameTF = new javax.swing.JTextField();
        updateCategoryButton = new javax.swing.JButton();
        updateCategoryNewNameTF = new javax.swing.JTextField();
        updateNewCategoryNameLabel = new javax.swing.JLabel();
        addCategoryPanel = new javax.swing.JPanel();
        addNameLabel = new javax.swing.JLabel();
        addCategoryNameTF = new javax.swing.JTextField();
        addCategoryButton = new javax.swing.JButton();
        addDeleteUpdateCategoryButtonPanel = new javax.swing.JPanel();
        addCategoryPanelButton = new javax.swing.JButton();
        deleteCategoryPanelButton = new javax.swing.JButton();
        updateCategoryPanelButton = new javax.swing.JButton();
        categoryTableScrollPane = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headingLabel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        categoryPageLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        categoryPageLabel.setText("Category Page");
        headingLabel.add(categoryPageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 32, -1, -1));

        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        headingLabel.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(729, 23, -1, -1));

        getContentPane().add(headingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 800, 80));

        addDeleteUpdateTabbedPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        addDeleteUpdateTabbedPanel.setPreferredSize(new java.awt.Dimension(314, 185));

        deleteCategoryPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deleteCategoryNameLabel.setText("Username");
        deleteCategoryPanel.add(deleteCategoryNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 60, -1));

        deleteCategoryUserNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCategoryUserNameTFActionPerformed(evt);
            }
        });
        deleteCategoryPanel.add(deleteCategoryUserNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 200, -1));

        deleteCategoryButton.setText("REMOVE");
        deleteCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCategoryButtonActionPerformed(evt);
            }
        });
        deleteCategoryPanel.add(deleteCategoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, -1, -1));

        addDeleteUpdateTabbedPanel.addTab("RM", deleteCategoryPanel);

        updateCategoryPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        updateCategoryLabel.setText("Username");
        updateCategoryPanel.add(updateCategoryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 60, -1));
        updateCategoryPanel.add(updateCategoryNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 190, -1));

        updateCategoryButton.setText("UPDATE");
        updateCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCategoryButtonActionPerformed(evt);
            }
        });
        updateCategoryPanel.add(updateCategoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, -1, -1));

        updateCategoryNewNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCategoryNewNameTFActionPerformed(evt);
            }
        });
        updateCategoryPanel.add(updateCategoryNewNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 190, -1));

        updateNewCategoryNameLabel.setText("New Username");
        updateCategoryPanel.add(updateNewCategoryNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 80, 20));

        addDeleteUpdateTabbedPanel.addTab("UM", updateCategoryPanel);

        addCategoryPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addNameLabel.setText("Name");
        addCategoryPanel.add(addNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        addCategoryNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryNameTFActionPerformed(evt);
            }
        });
        addCategoryPanel.add(addCategoryNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 200, -1));

        addCategoryButton.setText("ADD");
        addCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryButtonActionPerformed(evt);
            }
        });
        addCategoryPanel.add(addCategoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, -1, -1));

        addDeleteUpdateTabbedPanel.addTab("AM", addCategoryPanel);

        getContentPane().add(addDeleteUpdateTabbedPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 640, 180));

        addDeleteUpdateCategoryButtonPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addCategoryPanelButton.setText("Add Category");
        addCategoryPanelButton.setPreferredSize(new java.awt.Dimension(123, 22));
        addCategoryPanelButton.setVerifyInputWhenFocusTarget(false);
        addCategoryPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryPanelButtonActionPerformed(evt);
            }
        });
        addDeleteUpdateCategoryButtonPanel.add(addCategoryPanelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 123, 22));

        deleteCategoryPanelButton.setText("Delete Category");
        deleteCategoryPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCategoryPanelButtonActionPerformed(evt);
            }
        });
        addDeleteUpdateCategoryButtonPanel.add(deleteCategoryPanelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 123, 22));

        updateCategoryPanelButton.setText("Update Category");
        updateCategoryPanelButton.setPreferredSize(new java.awt.Dimension(123, 22));
        updateCategoryPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCategoryPanelButtonActionPerformed(evt);
            }
        });
        addDeleteUpdateCategoryButtonPanel.add(updateCategoryPanelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 123, 22));

        getContentPane().add(addDeleteUpdateCategoryButtonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 160, 190));

        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        categoryTableScrollPane.setViewportView(categoryTable);

        getContentPane().add(categoryTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 800, 250));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if(currentUser.getRole()==ADMIN_ROLE){
            new HomeScreenForAdmin(currentUser).setVisible(true);
            dispose();
        }else if(currentUser.getRole()==MANAGER_ROLE){
            new HomeScreenForManager(currentUser).setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteCategoryUserNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCategoryUserNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteCategoryUserNameTFActionPerformed

    private void deleteCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCategoryButtonActionPerformed

        String name =deleteCategoryUserNameTF.getText();
        CategoryModel category=categoryExist(name);
        if(category==null){
            JOptionPane.showMessageDialog(null, "No such category exist");
            return;
        }
        boolean categoryDeleted=deleteCategory(name);

        if(categoryDeleted){
            updateCategoryTable();
            JOptionPane.showMessageDialog(null, "category deleted");
        }else{
            JOptionPane.showMessageDialog(null, "category not deleted");
        }
    }//GEN-LAST:event_deleteCategoryButtonActionPerformed
    
    private boolean deleteCategory(String name){
        
        final String statement = "delete from categories where `name`=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setString(1, name);
            int f=preparedStatement.executeUpdate();
            
            // f>0 means account deleted, f<=0 means not deleted
            return f>0;
        } catch (SQLException ex) {
                System.out.println("error in " + CategoryScreen.class.getName() + " = " + ex);
        }
        return false;
    }
    
    private CategoryModel categoryExist(String name) {
        try {
            final String searchStatement = "SELECT * from categories where name=?";
            PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
            searchPreparedStatement.setString(1, name);
            ResultSet searhResultSet = searchPreparedStatement.executeQuery();

            while (searhResultSet.next()) {
                CategoryModel category=new CategoryModel();
                category.setId(Integer.parseInt(searhResultSet.getString("id")));
                category.setName(name);
                return category;
            }
        } catch (SQLException ex) {
                System.out.println("error in " + CategoryScreen.class.getName() + " = " + ex);
        }
        return null;
    }
    
    private void updateCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCategoryButtonActionPerformed

        String name = updateCategoryNameTF.getText();
        CategoryModel category=categoryExist(name);
        if(category==null){
            JOptionPane.showMessageDialog(null, "No Such Category Exist");
            return;
        }
        CategoryModel newcategory=category;
        String newName = updateCategoryNewNameTF.getText();
        if (newName.isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter name");
            return;
        }
        newcategory.setName(newName);
        int categoryUpdate=updateCategory(newcategory);
        
        switch (categoryUpdate) {
            case USERNAME_ALREAD_IN_USE:
                break;
            case UPDATE_SUCCESSFUL:
                updateCategoryTable();
                break;
            case UPDATE_UNSUCCESSFUL:

                break;
            default:
                break;
        }
    }//GEN-LAST:event_updateCategoryButtonActionPerformed
    
    private int updateCategory(CategoryModel category){
        String name=category.getName();
        final String searchStatement = "SELECT * from categories where name=?";
        try {
            PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
            searchPreparedStatement.setString(1, name);

            ResultSet searhResultSet = searchPreparedStatement.executeQuery();

            while (searhResultSet.next()) {                
                
                return USERNAME_ALREAD_IN_USE;
            }
            final String insertStatement = "update categories set `name`=? where `id`=?";
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, Integer.toString(category.getId()));

            final int isAdded = preparedStatement.executeUpdate();

            if (isAdded > 0) {
                return UPDATE_SUCCESSFUL;
            } 
        } catch (SQLException ex) {
            System.out.println("error in " + CategoryScreen.class.getName() + " = " + ex);
        }    
        
        return UPDATE_UNSUCCESSFUL;
    }
    
    private void updateCategoryNewNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCategoryNewNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCategoryNewNameTFActionPerformed

    private void addCategoryNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryNameTFActionPerformed
        addCategoryButtonActionPerformed(evt);
    }//GEN-LAST:event_addCategoryNameTFActionPerformed

    private void addCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryButtonActionPerformed

        String name = addCategoryNameTF.getText();

        if (name.isBlank()) {
            JOptionPane.showMessageDialog(null, "name is blank");
            return;
        }

        int answer = addCategory(name);
        if(answer==USERNAME_ALREAD_IN_USE){
            JOptionPane.showMessageDialog(null, "Category name used");
            return;
        }
        if(answer==USER_ADDED){
            JOptionPane.showMessageDialog(null, "Category added");
            addCategoryNameTF.setText("");
            updateCategoryTable();
            return;
        }

        if(answer==USER_NOT_ADDED){
            JOptionPane.showMessageDialog(null, "No Category added");
            addCategoryNameTF.setText("");
        }
    }//GEN-LAST:event_addCategoryButtonActionPerformed
    
    private int addCategory(String name){

        final String searchStatement = "SELECT * from categories where name=?";
            
            try {
                PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
                searchPreparedStatement.setString(1, name);
                
                ResultSet searhResultSet = searchPreparedStatement.executeQuery();
                
                while (searhResultSet.next()) {
                    return USERNAME_ALREAD_IN_USE;
                }
                
                final String insertStatement = "INSERT INTO categories(name) values(?)";
                PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
                preparedStatement.setString(1, name);
                final int isAdded = preparedStatement.executeUpdate();

                if (isAdded > 0) {
                    return USER_ADDED;
                }
            } catch (SQLException ex) {
                System.out.println("error in " + CategoryScreen.class.getName() + " = " + ex);
            }
        return USER_NOT_ADDED;
    }
    
    private void updateCategoryTable(){
        final String statement = "SELECT * from categories";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"ID","Name"};
            DefaultTableModel model = new DefaultTableModel(null, headerName);
            categoryTable.setModel(model);
            Object[] row = new Object[2];

            while (resultSet.next()) {
                row[0] = resultSet.getString("id");
                row[1] = resultSet.getString("name");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CategoryScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addCategoryPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryPanelButtonActionPerformed
        addDeleteUpdateTabbedPanel.setSelectedComponent(addCategoryPanel);
    }//GEN-LAST:event_addCategoryPanelButtonActionPerformed

    private void deleteCategoryPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCategoryPanelButtonActionPerformed
        addDeleteUpdateTabbedPanel.setSelectedComponent(deleteCategoryPanel);
    }//GEN-LAST:event_deleteCategoryPanelButtonActionPerformed

    private void updateCategoryPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCategoryPanelButtonActionPerformed
        addDeleteUpdateTabbedPanel.setSelectedComponent(updateCategoryPanel);
    }//GEN-LAST:event_updateCategoryPanelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryButton;
    private javax.swing.JTextField addCategoryNameTF;
    private javax.swing.JPanel addCategoryPanel;
    private javax.swing.JButton addCategoryPanelButton;
    private javax.swing.JPanel addDeleteUpdateCategoryButtonPanel;
    private javax.swing.JTabbedPane addDeleteUpdateTabbedPanel;
    private javax.swing.JLabel addNameLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel categoryPageLabel;
    private javax.swing.JTable categoryTable;
    private javax.swing.JScrollPane categoryTableScrollPane;
    private javax.swing.JButton deleteCategoryButton;
    private javax.swing.JLabel deleteCategoryNameLabel;
    private javax.swing.JPanel deleteCategoryPanel;
    private javax.swing.JButton deleteCategoryPanelButton;
    private javax.swing.JTextField deleteCategoryUserNameTF;
    private javax.swing.JPanel headingLabel;
    private javax.swing.JButton updateCategoryButton;
    private javax.swing.JLabel updateCategoryLabel;
    private javax.swing.JTextField updateCategoryNameTF;
    private javax.swing.JTextField updateCategoryNewNameTF;
    private javax.swing.JPanel updateCategoryPanel;
    private javax.swing.JButton updateCategoryPanelButton;
    private javax.swing.JLabel updateNewCategoryNameLabel;
    // End of variables declaration//GEN-END:variables
}
